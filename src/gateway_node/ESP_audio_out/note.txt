// #include <SPIFFS.h>
// #include <Arduino.h>
// #include <freertos/FreeRTOS.h>
// #include <driver/i2s.h>
// #include <freertos/task.h>
// #include <I2SOutput.h>
// #define MINIMP3_IMPLEMENTATION
// #define MINIMP3_ONLY_MP3
// #define MINIMP3_NO_STDIO

// #include "minimp3.h"

// // Audio output configuration (I2S)
// #define I2S_SPEAKER_SERIAL_CLOCK GPIO_NUM_2
// #define I2S_SPEAKER_LEFT_RIGHT_CLOCK GPIO_NUM_15
// #define I2S_SPEAKER_SERIAL_DATA GPIO_NUM_4
// #define I2S_PORT I2S_NUM_0
// #define SAMPLE_RATE 44100

// // Configuration macros
// #define GPIO_BUTTON GPIO_NUM_0
// #define BUFFER_SIZE 1024

// // Global objects
// i2s_pin_config_t i2s_speaker_pins = {
//     .bck_io_num = I2S_SPEAKER_SERIAL_CLOCK,
//     .ws_io_num = I2S_SPEAKER_LEFT_RIGHT_CLOCK,
//     .data_out_num = I2S_SPEAKER_SERIAL_DATA,
//     .data_in_num = I2S_PIN_NO_CHANGE};

// void wait_for_button_push()
// {
//   while (digitalRead(GPIO_BUTTON) == HIGH)
//   {
//     Serial1.println("Waiting for button push...");
//     vTaskDelay(pdMS_TO_TICKS(100));
//     // delay(100); // Wait for the button to be pressed
//   }
// }

// void play_task(void *param)
// {
//   Output *output = new I2SOutput(I2S_NUM_0, i2s_speaker_pins);
//   // create the file system
//   SPIFFS spiffs("/fs");
//   // setup for the mp3 decoded
//   short *pcm = (short *)malloc(sizeof(short) * MINIMP3_MAX_SAMPLES_PER_FRAME);
//   uint8_t *input_buf = (uint8_t *)malloc(BUFFER_SIZE);
//   if (!pcm)
//   {
//     Serial.println("main: Failed to allocate pcm memory");
//   }
//   if (!input_buf)
//   {
//     Serial.println("main: Failed to allocate input_buf memory");
//   }
//   while (true)
//   {
//     // wait for the button to be pushed
//     wait_for_button_push();
//     Serial.println("Button pressed, starting playback...");

//     // mp3 decoder state
//     mp3dec_t mp3d = {};
//     mp3dec_init(&mp3d);
//     mp3dec_frame_info_t info = {};
//     // keep track of how much data we have buffered, need to read and decoded
//     int to_read = BUFFER_SIZE;
//     int buffered = 0;
//     int decoded = 0;
//     bool is_output_started = false;
//     // this assumes that you have uploaded the mp3 file to the SPIFFS
//     FILE *fp = fopen("/fs/ching.mp3", "r");
//     if (!fp)
//     {
//       Serial.println("main: Failed to open file");
//       continue;
//     }
//     while (1)
//     {
//       // read in the data that is needed to top up the buffer
//       size_t n = fread(input_buf + buffered, 1, to_read, fp);
//       // feed the watchdog
//       vTaskDelay(pdMS_TO_TICKS(1));
//       // ESP_LOGI("main", "Read %d bytes\n", n);
//       buffered += n;
//       if (buffered == 0)
//       {
//         // we've reached the end of the file and processed all the buffered data
//         output->stop();
//         is_output_started = false;
//         break;
//       }
//       // decode the next frame
//       int samples = mp3dec_decode_frame(&mp3d, input_buf, buffered, pcm, &info);
//       // we've processed this may bytes from teh buffered data
//       buffered -= info.frame_bytes;
//       // shift the remaining data to the front of the buffer
//       memmove(input_buf, input_buf + info.frame_bytes, buffered);
//       // we need to top up the buffer from the file
//       to_read = info.frame_bytes;
//       if (samples > 0)
//       {
//         // if we haven't started the output yet we can do it now as we now know the sample rate and number of channels
//         if (!is_output_started)
//         {
//           output->start(info.hz);
//           is_output_started = true;
//         }
//         // if we've decoded a frame of mono samples convert it to stereo by duplicating the left channel
//         // we can do this in place as our samples buffer has enough space
//         if (info.channels == 1)
//         {
//           for (int i = samples - 1; i >= 0; i--)
//           {
//             pcm[i * 2] = pcm[i];
//             pcm[i * 2 - 1] = pcm[i];
//           }
//         }
//         // write the decoded samples to the I2S output
//         output->write(pcm, samples);
//         // keep track of how many samples we've decoded
//         decoded += samples;
//       }
//       // ESP_LOGI("main", "decoded %d samples\n", decoded);
//     }
//     Serial.println("main: Finished\n");
//     fclose(fp);
//   }
// }

// void setup()
// {
//   // Initialize Serial for debugging
//   Serial.begin(460800);
//   delay(16000);
//   Serial.println("Starting...");

//   // Initialize button
//   pinMode(GPIO_BUTTON, INPUT_PULLUP);

//   // Start the playback task
//   xTaskCreatePinnedToCore(play_task, "task", 32768, NULL, 1, NULL, 1);
// }

// void loop()
// {
//   // The main loop does nothing as the task handles playback
// }



